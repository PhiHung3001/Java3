/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Test2;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import test.test;

/**
 *
 * @author Administrator
 */
public class Test3 extends javax.swing.JFrame {

    Connection cn;
    DefaultTableModel model;
    int index;

    /**
     * Creates new form Test3
     */
    public Test3() {
        initComponents();
        cn = Connect.ketnoi("TestAss1");
        this.setLocationRelativeTo(null);
        model = (DefaultTableModel) tblShow.getModel();
        loadCBO();
        loadData();

        tblShow.setRowSelectionInterval(0, 0);
        showDetail(0);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cboMaSV = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblShow = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        txtMaMon = new javax.swing.JTextField();
        txtTenMon = new javax.swing.JTextField();
        txtDiem = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        cboMaSV.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboMaSVItemStateChanged(evt);
            }
        });

        tblShow.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Mã Môn", "Tên Môn", "Điểm"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblShow.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblShowMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblShow);

        jLabel1.setText("Mã Môn Học");

        jLabel2.setText("Tên Môn");

        jLabel3.setText("Điểm");

        btnAdd.setText("ADD");
        btnAdd.setToolTipText("");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setText("UPDATE");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("DELETE");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        txtTenMon.setEditable(false);
        txtTenMon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTenMonActionPerformed(evt);
            }
        });

        jLabel4.setText("Mã SV");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3))
                                .addGap(26, 26, 26)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtDiem, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtTenMon, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtMaMon, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(53, 53, 53)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 411, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(355, 355, 355)
                        .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(jLabel4)
                .addGap(55, 55, 55)
                .addComponent(cboMaSV, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboMaSV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtMaMon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAdd))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTenMon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(btnUpdate)))
                .addGap(21, 21, 21)
                .addComponent(btnDelete)
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtDiem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(51, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtTenMonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTenMonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTenMonActionPerformed

    private void cboMaSVItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboMaSVItemStateChanged
        // TODO add your handling code here:
        try {
            String sql = "select MONHOC.MaMH,TenMH,diem from MONHOC "
                    + "join DIEM on MONHOC.MaMH = DIEM.MaMH "
                    + "join SINHVIEN on SINHVIEN.MaSV =DIEM.Masv "
                    + "where SINHVIEN.MaSV = '" + cboMaSV.getSelectedItem().toString() + "'";
            Statement st = cn.createStatement();

            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                model.addRow(new Object[]{rs.getString(1), rs.getString(2), rs.getString(3)});
                txtMaMon.setText(tblShow.getValueAt(0, 0).toString());
                txtTenMon.setText(tblShow.getValueAt(0, 1).toString());
                txtDiem.setText(tblShow.getValueAt(0, 2).toString());
            }
            loadData();
            rs.close();
            st.close();
            if (tblShow.getRowCount() > 0) {

                tblShow.setRowSelectionInterval(0, 0);
                showDetail(0);
            } else {
                txtDiem.setText("");
                txtMaMon.setText("");
                txtTenMon.setText("");
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_cboMaSVItemStateChanged

    private void tblShowMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblShowMouseClicked
        // TODO add your handling code here:
        showDetail(tblShow.getSelectedRow());
    }//GEN-LAST:event_tblShowMouseClicked

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        try {
            try {
                if (txtMaMon.getText().equals("")) {
                    JOptionPane.showMessageDialog(this, "Mã môn không được để trống");
                    return;

                }
                String sql = "Select MaMH from DIEM where MaSV = '" + cboMaSV.getSelectedItem().toString() + "'";
                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(sql);

                while (rs.next()) {
                    String maTrung = rs.getString(1);
                    if (maTrung.equals(txtMaMon.getText())) {

                        JOptionPane.showMessageDialog(this, "Sinh viên đã có điểm môn này");
                        return;

                    } 

                }

            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                        boolean check = false;
                        String sql = "select MaMH from MONHOC";
                        Statement st = cn.createStatement();
                        ResultSet rs = st.executeQuery(sql);
                        while (rs.next()) {
                           String ma = rs.getString(1);
                            if (ma.equals(txtMaMon.getText())) {
                                check = true;
                            } 
                           
                        }
                         if(check == false){
                                JOptionPane.showMessageDialog(this, "Mã không tồn tại");
                                return;

                            }

                    
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {

                if (txtDiem.getText().equals("")) {
                    JOptionPane.showMessageDialog(this, "Điểm không được bỏ trông");
                    return;
                }
                if (Double.parseDouble(txtDiem.getText()) < 0 || Double.parseDouble(txtDiem.getText()) > 10) {
                    JOptionPane.showMessageDialog(this, "Điểm thuộc khoảng từ 0 đến 10");
                    return;
                }
            } catch (Exception e) {
            }
            Double diem = Double.parseDouble(txtDiem.getText());
            String sql = "INSERT INTO DIEM VALUES (?,?,?)";
            PreparedStatement ptm = cn.prepareStatement(sql);
            ptm.setString(1, cboMaSV.getSelectedItem() + "");
            ptm.setString(2, txtMaMon.getText());
            ptm.setDouble(3, Double.parseDouble(txtDiem.getText()));
            
            ptm.executeUpdate();
            JOptionPane.showMessageDialog(this, "Thêm thành công");
            String sql2 = "select TenMH from MONHOC where MaMH= ? ";
            PreparedStatement ps = cn.prepareStatement(sql2);
            ps.setString(1, txtMaMon.getText());
            ResultSet rs = ps.executeQuery();
            
            while (rs.next()) {                
                txtTenMon.setText(rs.getString(1));
            }
            loadData();
            
            ptm.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        try {
            
            try {
                if (txtMaMon.getText().equals("")) {
                    JOptionPane.showMessageDialog(this, "Mã môn không được để trống");
                    return;

                }
                String sql = "Select MaMH from DIEM where MaSV = '" + cboMaSV.getSelectedItem().toString() + "'";
                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(sql);

                while (rs.next()) {
                    String maTrung = rs.getString(1);
                    if (maTrung.equals(txtMaMon.getText())) {

                        JOptionPane.showMessageDialog(this, "Sinh viên đã có điểm môn này");
                        return;

                    } 

                }

            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                        boolean check = false;
                        String sql = "select MaMH from MONHOC";
                        Statement st = cn.createStatement();
                        ResultSet rs = st.executeQuery(sql);
                        while (rs.next()) {
                           String ma = rs.getString(1);
                            if (ma.equals(txtMaMon.getText())) {
                                check = true;
                            } 
                           
                        }
                         if(check == false){
                                JOptionPane.showMessageDialog(this, "Mã không tồn tại");
                                return;

                            }

                    
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {

                if (txtDiem.getText().equals("")) {
                    JOptionPane.showMessageDialog(this, "Điểm không được bỏ trông");
                    return;
                }
                if (Double.parseDouble(txtDiem.getText()) < 0 || Double.parseDouble(txtDiem.getText()) > 10) {
                    JOptionPane.showMessageDialog(this, "Điểm thuộc khoảng từ 0 đến 10");
                    return;
                }
            } catch (Exception e) {
            }
            String sql = "update DIEM set diem = ? where Masv = '" + cboMaSV.getSelectedItem().toString() + "' and MaMH =?";
            PreparedStatement ptm = cn.prepareStatement(sql);
            ptm.setDouble(1, Double.parseDouble(txtDiem.getText()));
            ptm.setString(2, txtMaMon.getText());
            ptm.executeUpdate();
            JOptionPane.showMessageDialog(this, "Sửa thành công");
            loadData();
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        try {
            String sql = "DELETE FROM dbo.DIEM WHERE MaSV = '" + cboMaSV.getSelectedItem().toString() + "' AND MaMH = ?";
            PreparedStatement ptm = cn.prepareStatement(sql);

            ptm.setString(1, txtMaMon.getText());
            ptm.executeUpdate();
            JOptionPane.showMessageDialog(this, "Xóa thành công");
            loadData();
            ptm.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnDeleteActionPerformed
    private void loadCBO() {
        try {
            String sql = "Select MaSV from SINHVIEN";
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                cboMaSV.addItem(rs.getString(1));
            }
        } catch (Exception e) {
        }
    }

    private void loadData() {
        try {
            model.setRowCount(0);
            String sql = "select MONHOC.MaMH,TenMH,diem from MONHOC "
                    + "join DIEM on MONHOC.MaMH = DIEM.MaMH "
                    + "join SINHVIEN on SINHVIEN.MaSV =DIEM.Masv "
                    + "where SINHVIEN.MaSV = '" + cboMaSV.getSelectedItem().toString() + "'";
            Statement ps = cn.createStatement();
            ResultSet rs = ps.executeQuery(sql);
            while (rs.next()) {
                model.addRow(new Object[]{rs.getString(1), rs.getString(2), rs.getDouble(3)});
            }
        } catch (Exception e) {
        }
        if (tblShow.getRowCount() < 0) {
            txtDiem.setText("");
            txtMaMon.setText("");
            txtTenMon.setText("");
        }

    }

    private void showDetail(int index) {
        index = tblShow.getSelectedRow();
        txtMaMon.setText(tblShow.getValueAt(index, 0).toString());
        txtTenMon.setText(tblShow.getValueAt(index, 1).toString());
        txtDiem.setText(tblShow.getValueAt(index, 2).toString());
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Test3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Test3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Test3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Test3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Test3().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cboMaSV;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblShow;
    private javax.swing.JTextField txtDiem;
    private javax.swing.JTextField txtMaMon;
    private javax.swing.JTextField txtTenMon;
    // End of variables declaration//GEN-END:variables
}
